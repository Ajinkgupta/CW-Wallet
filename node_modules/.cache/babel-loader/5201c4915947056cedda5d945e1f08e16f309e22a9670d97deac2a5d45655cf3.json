{"ast":null,"code":"var _jsxFileName = \"/workspace/Cryptway-ETH-Wallet/src/pages/recieve.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { generateAccount } from '../utils/AccountUtils';\nimport { QRCodeCanvas } from \"qrcode.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Recieve = () => {\n  _s();\n  const recoveryPhraseKeyName = 'recoveryPhrase';\n  const [seedphrase, setSeedphrase] = useState('');\n  const [account, setAccount] = useState(null);\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n  function handleChange(event) {\n    setSeedphrase(event.target.value);\n  }\n  const handleKeyDown = async event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  };\n  const recoverAccount = useCallback(async recoveryPhrase => {\n    const result = await generateAccount(recoveryPhrase);\n    setAccount(result.account);\n    if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n      localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n    }\n  }, []);\n  useEffect(() => {\n    const storedAccount = localStorage.getItem('account');\n    if (storedAccount) {\n      setAccount(JSON.parse(storedAccount));\n    }\n  }, []);\n  useEffect(() => {\n    const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName);\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex justify-center items-center p-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-[#2D2F36] mt-20 w-full sm:w-[30rem] md:w-[32rem] rounded-3xl p-4 content-box shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mx-auto my-4 rounded-md font-bold text-lg text-white\",\n          children: \"My QR-CODE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 4\n        }, this), (account === null || account === void 0 ? void 0 : account.address) && /*#__PURE__*/_jsxDEV(QRCodeCanvas, {\n          id: \"qrCode\",\n          size: 200,\n          value: account === null || account === void 0 ? void 0 : account.address,\n          bgColor: \"#2D2F36\",\n          fgColor: \"#ffffff\",\n          level: \"H\",\n          className: \"w-[300px] h-[300px] mx-auto my-4 rounded-md  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n};\n_s(Recieve, \"0PsI5KmWrb3QP83akia5jLsMH9I=\");\n_c = Recieve;\nexport default Recieve;\nvar _c;\n$RefreshReg$(_c, \"Recieve\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","generateAccount","QRCodeCanvas","Recieve","recoveryPhraseKeyName","seedphrase","setSeedphrase","account","setAccount","showRecoverInput","setShowRecoverInput","handleChange","event","target","value","handleKeyDown","keyCode","preventDefault","recoverAccount","recoveryPhrase","result","localStorage","getItem","setItem","storedAccount","JSON","parse","localStorageRecoveryPhrase","address"],"sources":["/workspace/Cryptway-ETH-Wallet/src/pages/recieve.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Account } from '../models/Account';   \nimport { generateAccount } from '../utils/AccountUtils';\nimport { QRCodeCanvas } from \"qrcode.react\";    \n\nconst Recieve = () => {  \n\n   \n  const recoveryPhraseKeyName = 'recoveryPhrase';\n   const [seedphrase, setSeedphrase] = useState('');\n  const [account, setAccount] = useState<Account | null>(null);\n   const [showRecoverInput, setShowRecoverInput] = useState(false);\n \n   function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n     setSeedphrase(event.target.value);\n   }\n \n   const handleKeyDown = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n     if (event.keyCode === 13) {\n       event.preventDefault();\n       recoverAccount(seedphrase);\n     }\n   }\n \n  const recoverAccount = useCallback(\n    async (recoveryPhrase: string) => {\n      const result = await generateAccount(recoveryPhrase);\n    \n    setAccount(result.account);\n\n     if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n       localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n     }\n\n   }, []\n );\n \n \n  useEffect(() => {\n  const storedAccount = localStorage.getItem('account');\n\n  if (storedAccount) {\n    setAccount(JSON.parse(storedAccount));\n  }\n}, []);\n\nuseEffect(() => {\n\n  const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName)\n  if (localStorageRecoveryPhrase) {\n    setSeedphrase(localStorageRecoveryPhrase);\n    recoverAccount(localStorageRecoveryPhrase);\n  }\n}, [recoverAccount])\n\nreturn ( \n <> \n  <div className=\"flex-1 flex justify-center items-center p-5\">\n   <div className=\"bg-[#2D2F36] mt-20 w-full sm:w-[30rem] md:w-[32rem] rounded-3xl p-4 content-box shadow-lg\">\n          \n   <div className='text-center mx-auto my-4 rounded-md font-bold text-lg text-white'>My QR-CODE</div>\n\n {account?.address && <QRCodeCanvas\n  id=\"qrCode\"\n  size={200}\n  value={account?.address}\n  bgColor=\"#2D2F36\"\n  fgColor=\"#ffffff\"\n  level={\"H\"}\n\n  className=\"w-[300px] h-[300px] mx-auto my-4 rounded-md  \"\n/>\n} \n\n         \n        </div>\n      </div>\n \n </>\n \n  );\n};\n\nexport default Recieve;\n\n "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE/D,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,YAAY,QAAQ,cAAc;AAAC;AAAA;AAE5C,MAAMC,OAAO,GAAG,MAAM;EAAA;EAGpB,MAAMC,qBAAqB,GAAG,gBAAgB;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAiB,IAAI,CAAC;EAC3D,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE/D,SAASW,YAAY,CAACC,KAA0C,EAAE;IAChEN,aAAa,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC;EAEA,MAAMC,aAAa,GAAG,MAAOH,KAA4C,IAAK;IAC5E,IAAIA,KAAK,CAACI,OAAO,KAAK,EAAE,EAAE;MACxBJ,KAAK,CAACK,cAAc,EAAE;MACtBC,cAAc,CAACb,UAAU,CAAC;IAC5B;EACF,CAAC;EAEF,MAAMa,cAAc,GAAGpB,WAAW,CAChC,MAAOqB,cAAsB,IAAK;IAChC,MAAMC,MAAM,GAAG,MAAMnB,eAAe,CAACkB,cAAc,CAAC;IAEtDX,UAAU,CAACY,MAAM,CAACb,OAAO,CAAC;IAEzB,IAAIc,YAAY,CAACC,OAAO,CAAClB,qBAAqB,CAAC,KAAKe,cAAc,EAAE;MAClEE,YAAY,CAACE,OAAO,CAACnB,qBAAqB,EAAEe,cAAc,CAAC;IAC7D;EAEF,CAAC,EAAE,EAAE,CACN;EAGApB,SAAS,CAAC,MAAM;IAChB,MAAMyB,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAErD,IAAIE,aAAa,EAAE;MACjBhB,UAAU,CAACiB,IAAI,CAACC,KAAK,CAACF,aAAa,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IAEd,MAAM4B,0BAA0B,GAAGN,YAAY,CAACC,OAAO,CAAClB,qBAAqB,CAAC;IAC9E,IAAIuB,0BAA0B,EAAE;MAC9BrB,aAAa,CAACqB,0BAA0B,CAAC;MACzCT,cAAc,CAACS,0BAA0B,CAAC;IAC5C;EACF,CAAC,EAAE,CAACT,cAAc,CAAC,CAAC;EAEpB,oBACC;IAAA,uBACC;MAAK,SAAS,EAAC,6CAA6C;MAAA,uBAC3D;QAAK,SAAS,EAAC,2FAA2F;QAAA,wBAE1G;UAAK,SAAS,EAAC,kEAAkE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAiB,EAEnG,CAAAX,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,OAAO,kBAAI,QAAC,YAAY;UACjC,EAAE,EAAC,QAAQ;UACX,IAAI,EAAE,GAAI;UACV,KAAK,EAAErB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,OAAQ;UACxB,OAAO,EAAC,SAAS;UACjB,OAAO,EAAC,SAAS;UACjB,KAAK,EAAE,GAAI;UAEX,SAAS,EAAC;QAA+C;UAAA;UAAA;UAAA;QAAA,QACzD;MAAA;QAAA;QAAA;QAAA;MAAA;IAIY;MAAA;MAAA;MAAA;IAAA;EACF,iBAER;AAGJ,CAAC;AAAC,GA5EIzB,OAAO;AAAA,KAAPA,OAAO;AA8Eb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}