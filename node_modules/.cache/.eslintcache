[{"/workspace/Cryptway-ETH-Wallet/src/index.tsx":"1","/workspace/Cryptway-ETH-Wallet/src/reportWebVitals.ts":"2","/workspace/Cryptway-ETH-Wallet/src/App.tsx":"3","/workspace/Cryptway-ETH-Wallet/src/utils/AccountUtils.ts":"4","/workspace/Cryptway-ETH-Wallet/src/pages/App.tsx":"5","/workspace/Cryptway-ETH-Wallet/src/pages/recieve.tsx":"6","/workspace/Cryptway-ETH-Wallet/src/pages/AccountSend.tsx":"7","/workspace/Cryptway-ETH-Wallet/src/layout/nav.tsx":"8","/workspace/Cryptway-ETH-Wallet/src/pages/AccountTransactions.tsx":"9","/workspace/Cryptway-ETH-Wallet/src/layout/sidebar.tsx":"10","/workspace/Cryptway-ETH-Wallet/src/pages/AccountDetail.tsx":"11","/workspace/Cryptway-ETH-Wallet/src/utils/TransactionUtils.ts":"12","/workspace/Cryptway-ETH-Wallet/src/models/Chain.ts":"13","/workspace/Cryptway-ETH-Wallet/src/services/TransactionService.ts":"14"},{"size":342,"mtime":1738926653060,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1738926653060,"results":"17","hashOfConfig":"16"},{"size":2508,"mtime":1738926653016,"results":"18","hashOfConfig":"16"},{"size":1180,"mtime":1738926653064,"results":"19","hashOfConfig":"16"},{"size":3631,"mtime":1738926653060,"results":"20","hashOfConfig":"16"},{"size":2158,"mtime":1738926653060,"results":"21","hashOfConfig":"16"},{"size":6257,"mtime":1738926653060,"results":"22","hashOfConfig":"16"},{"size":8524,"mtime":1738926653060,"results":"23","hashOfConfig":"16"},{"size":4924,"mtime":1738926653060,"results":"24","hashOfConfig":"16"},{"size":3444,"mtime":1738926653060,"results":"25","hashOfConfig":"16"},{"size":5975,"mtime":1738926855576,"results":"26","hashOfConfig":"16"},{"size":868,"mtime":1738926653064,"results":"27","hashOfConfig":"16"},{"size":628,"mtime":1738926653060,"results":"28","hashOfConfig":"16"},{"size":687,"mtime":1738926653064,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"akukej",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/workspace/Cryptway-ETH-Wallet/src/index.tsx",[],[],[],"/workspace/Cryptway-ETH-Wallet/src/reportWebVitals.ts",[],[],"/workspace/Cryptway-ETH-Wallet/src/App.tsx",["80","81","82","83"],[],"import React, { useCallback, useEffect, useState } from 'react';\n\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport APP from './pages/App';\n\nimport AccountSend from './pages/AccountSend';\nimport Navbar from './layout/nav';\nimport { Account } from './models/Account';\nimport AccountTransactions from './pages/AccountTransactions';\nimport Recieve from './pages/recieve';\nimport { generateAccount } from './utils/AccountUtils';\nfunction App() {\n  const recoveryPhraseKeyName = 'recoveryPhrase';\n  const [seedphrase, setSeedphrase] = useState('');\n  const [account, setAccount] = useState<Account | null>(null);\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSeedphrase(event.target.value);\n  }\n\n  const handleKeyDown = async (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  };\n\n  const recoverAccount = useCallback(async (recoveryPhrase: string) => {\n    const result = await generateAccount(recoveryPhrase);\n\n    setAccount(result.account);\n\n    if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n      localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n    }\n  }, []);\n\n  useEffect(() => {\n    const storedAccount = localStorage.getItem('account');\n\n    if (storedAccount) {\n      setAccount(JSON.parse(storedAccount));\n    }\n  }, []);\n\n  useEffect(() => {\n    const localStorageRecoveryPhrase = localStorage.getItem(\n      recoveryPhraseKeyName\n    );\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount]);\n\n  return (\n    <Router>\n      <div className=\"bg-[#202124] w-full min-h-screen\">\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<APP />} />\n          <Route\n            path=\"/send\"\n            element={account ? <AccountSend account={account} /> : null}\n          />\n          <Route\n            path=\"/history\"\n            element={account ? <AccountTransactions account={account} /> : null}\n          />\n\n          <Route path=\"/scan\" element={<Scan />} />\n\n          <Route path=\"/show-qr\" element={<Recieve />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nfunction Scan() {\n  window.location.replace('./scan.html');\n  return null;\n}\n\nexport default App;\n","/workspace/Cryptway-ETH-Wallet/src/utils/AccountUtils.ts",[],[],"/workspace/Cryptway-ETH-Wallet/src/pages/App.tsx",["84"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport { generateAccount } from '../utils/AccountUtils';\nimport { Account } from '../models/Account';\nimport AccountDetail from './AccountDetail'; \nimport logo from '../assets/logo.png';   \n\nconst recoveryPhraseKeyName = 'recoveryPhrase';\n\nfunction APP() {\n  const [seedphrase, setSeedphrase] = useState('');\n const [account, setAccount] = useState<Account | null>(null);\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSeedphrase(event.target.value);\n  }\n\n  const handleKeyDown = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  }\n\n  const recoverAccount = useCallback(\n     async (recoveryPhrase: string) => {\n     const result = await generateAccount(recoveryPhrase);\n     \n     setAccount(result.account);\n\n      if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n        localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n      }\n\n    }, []\n  );\n\n  useEffect(() => {\n\n    const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName)\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount])\n\n  async function createAccount() {\n   const result = await generateAccount();\n\n     setAccount(result.account);\n  localStorage.setItem('account', JSON.stringify(result.account));\n  window.location.reload();\n  }\n\n  useEffect(() => {\n  const storedAccount = localStorage.getItem('account');\n\n  if (storedAccount) {\n    setAccount(JSON.parse(storedAccount));\n  }\n}, []);\n\n\n  return ( \n<>\n    {!account &&\n    \n    <div className=\"rounded shadow-lg bg-gray-900 p-8 relative h-screen flex flex-col justify-center items-center\">\n    <img src={logo} className=\"w-24 h-24 mb-11\" /> \n    <h1 className=\"text-3xl text-white font-bold  text-center mb-8\">\n      CRYPTWAY\n    </h1>\n    <form className=\"items-center\" onSubmit={event => event.preventDefault()}>\n    <div className='flex justify-center '> \n      <button\n        type=\"button\"\n        className=\"bg-purple-500 hover:bg-purple-600 text-white py-2 px-4 rounded mr-3\"\n        onClick={createAccount}\n      >\n        Create Account\n      </button> \n      <button\n        type=\"button\"\n        className=\"border border-purple-500 text-purple-500 hover:text-white hover:bg-purple-500 py-2 px-4 rounded\"\n        onClick={() =>\n          showRecoverInput ? recoverAccount(seedphrase) : setShowRecoverInput(true)\n        }\n        disabled={showRecoverInput && !seedphrase}\n      >\n        {showRecoverInput ? \"Submit Recovery\" : \"Recover Account\"}\n      </button> \n      </div>\n\n      {showRecoverInput && (\n        <div className=\"mt-4\">\n          <label\n            htmlFor=\"seedphrase\"\n            className=\"block font-medium text-gray-700 mb-2\"\n          >\n            Seedphrase or Private Key for Recovery\n          </label>\n          <input\n            id=\"seedphrase\"\n            type=\"text\"\n            placeholder=\"Enter your seedphrase or private key\"\n            className=\"border rounded py-2 px-3 w-full bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-purple-500\"\n            value={seedphrase}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n          />\n        </div>\n      )}\n    </form>\n  </div>\n  \n\n  }\n  \n  {account && \n\n  <AccountDetail account={account}/>\n}\n  \n  </>\n  )\n\n}\nexport default APP;","/workspace/Cryptway-ETH-Wallet/src/pages/recieve.tsx",["85","86","87","88"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport { Account } from '../models/Account';   \nimport { generateAccount } from '../utils/AccountUtils';\nimport { QRCodeCanvas } from \"qrcode.react\";    \n\nconst Recieve = () => {  \n\n   \n  const recoveryPhraseKeyName = 'recoveryPhrase';\n   const [seedphrase, setSeedphrase] = useState('');\n  const [account, setAccount] = useState<Account | null>(null);\n   const [showRecoverInput, setShowRecoverInput] = useState(false);\n \n   function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n     setSeedphrase(event.target.value);\n   }\n \n   const handleKeyDown = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n     if (event.keyCode === 13) {\n       event.preventDefault();\n       recoverAccount(seedphrase);\n     }\n   }\n \n  const recoverAccount = useCallback(\n    async (recoveryPhrase: string) => {\n      const result = await generateAccount(recoveryPhrase);\n    \n    setAccount(result.account);\n\n     if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n       localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n     }\n\n   }, []\n );\n \n \n  useEffect(() => {\n  const storedAccount = localStorage.getItem('account');\n\n  if (storedAccount) {\n    setAccount(JSON.parse(storedAccount));\n  }\n}, []);\n\nuseEffect(() => {\n\n  const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName)\n  if (localStorageRecoveryPhrase) {\n    setSeedphrase(localStorageRecoveryPhrase);\n    recoverAccount(localStorageRecoveryPhrase);\n  }\n}, [recoverAccount])\n\nreturn ( \n <> \n  <div className=\"flex-1 flex justify-center items-center p-5\">\n   <div className=\"bg-[#2D2F36] mt-20 w-full sm:w-[30rem] md:w-[32rem] rounded-3xl p-4 content-box shadow-lg\">\n          \n   <div className='text-center mx-auto my-4 rounded-md font-bold text-lg text-white'>My QR-CODE</div>\n\n {account?.address && <QRCodeCanvas\n  id=\"qrCode\"\n  size={200}\n  value={account?.address}\n  bgColor=\"#2D2F36\"\n  fgColor=\"#ffffff\"\n  level={\"H\"}\n\n  className=\"w-[300px] h-[300px] mx-auto my-4 rounded-md  \"\n/>\n} \n\n         \n        </div>\n      </div>\n \n </>\n \n  );\n};\n\nexport default Recieve;\n\n ","/workspace/Cryptway-ETH-Wallet/src/pages/AccountSend.tsx",["89","90"],[],"import React, { useEffect, useState } from 'react';\nimport { sendToken } from '../utils/TransactionUtils';\nimport { sepolia } from '../models/Chain';\nimport { Account } from '../models/Account';\nimport AccountTransactions from './AccountTransactions';\nimport { ethers } from 'ethers';\nimport { toFixedIfNecessary } from '../utils/AccountUtils';\nimport './Account.css';\nimport { useLocation } from 'react-router-dom';\n\ninterface AccountSendProps {\n  account: Account;\n}\n\nconst AccountSend: React.FC<AccountSendProps> = ({ account }) => {\n  const location = useLocation();\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(account.balance);\n\n  const [networkResponse, setNetworkResponse] = useState<{\n    status: null | 'pending' | 'complete' | 'error';\n    message: string | React.ReactElement;\n  }>({\n    status: null,\n    message: '',\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const provider = new ethers.providers.JsonRpcProvider(sepolia.rpcUrl);\n      let accountBalance = await provider.getBalance(account.address);\n      setBalance(\n        String(toFixedIfNecessary(ethers.utils.formatEther(accountBalance)))\n      );\n    };\n    fetchData();\n  }, [account.address]);\n\n  function handleDestinationAddressChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ) {\n    setDestinationAddress(event.target.value);\n  }\n\n  function handleAmountChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setAmount(Number.parseFloat(event.target.value));\n  }\n\n  async function transfer() {\n    // Set the network response status to \"pending\"\n    setNetworkResponse({\n      status: 'pending',\n      message: '',\n    });\n\n    try {\n      const { receipt } = await sendToken(\n        amount,\n        account.address,\n        destinationAddress,\n        account.privateKey\n      );\n\n      if (receipt.status === 1) {\n        // Set the network response status to \"complete\" and the message to the transaction hash\n        setNetworkResponse({\n          status: 'complete',\n          message: (\n            <p>\n              Transfer complete!{' '}\n              <a\n                href={`${sepolia.blockExplorerUrl}/tx/${receipt.transactionHash}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                View transaction\n              </a>\n            </p>\n          ),\n        });\n        return receipt;\n      } else {\n        // Transaction failed\n        console.log(`Failed to send ${receipt}`);\n        // Set the network response status to \"error\" and the message to the receipt\n        setNetworkResponse({\n          status: 'error',\n          message: JSON.stringify(receipt),\n        });\n        return { receipt };\n      }\n    } catch (error: any) {\n      // An error occurred while sending the transaction\n      console.error({ error });\n      // Set the network response status to \"error\" and the message to the error\n      setNetworkResponse({\n        status: 'error',\n        message: error.reason || JSON.stringify(error),\n      });\n    }\n  }\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const addressParam = queryParams.get('address');\n    if (addressParam) {\n      setDestinationAddress(addressParam);\n    }\n  }, [location.search]);\n\n  return (\n    <>\n      <div className=\"flex-1 flex justify-start   items-center flex-col   p-5 z-40 \">\n        <div className=\"bg-[#2D2F36] mt-20   w-max-full     sm:w-[30rem]   md:w-[32rem] rounded-3xl p-4 content-box\">\n          <div className=\"px-2 flex items-center text-white justify-between font-semibold text-xl\">\n            <span>SEND</span>\n          </div>\n          <div className=\"bg-[#20242A] my-3 rounded-2xl p-6 text-3xl  border border-[#20242A] hover:border-[#41444F]  flex justify-between\">\n            <input\n              className=\"bg-transparent mr-2 rounded h-10 placeholder:text-[#B2B9D2] outline-none mb-6 w-full text-2xl\"\n              type=\"number\"\n              value={amount}\n              onChange={handleAmountChange}\n            />\n\n            <div className=\"flex w-1/4\">\n              <div className=\"w-full h-12 flex justify-between items-center bg-[#2D2F36] hover:bg-[#41444F] rounded-2xl text-xl font-medium cursor-pointer p-2 mt-[-0.2rem]\">\n                <div className=\"flex text-white items-center\">\n                  <span className=\"mx-2\">ETH</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-[#20242A] my-3 rounded-2xl p-6 text-3xl  border border-[#20242A] hover:border-[#41444F]  flex justify-between\">\n            <input\n              className=\" rounded h-10 bg-transparent placeholder:text-[#B2B9D2] outline-none mb-6 w-full text-2xl\"\n              placeholder=\"0x....\"\n              type=\"text\"\n              value={destinationAddress}\n              onChange={handleDestinationAddressChange}\n            />\n          </div>\n\n          <button\n            className=\"bg-purple-600 my-2  w-full rounded-3xl py-2 px-8 text-xl font-semibold flex items-center justify-center cursor-pointer border border-black hover:border-[#234169]\"\n            type=\"button\"\n            onClick={transfer}\n            disabled={!amount || networkResponse.status === 'pending'}\n          >\n            Send {amount} ETH\n          </button>\n\n          {networkResponse.status && (\n            <>\n              <div className=\"bg-orange-600 my-2  w-full rounded-3xl py-2 px-8 text-xl font-semibold flex items-center justify-center cursor-pointer border border-black hover:border-[#234169]\">\n                {networkResponse.status === 'pending' && (\n                  <p>Transfer is pending...</p>\n                )}\n                {networkResponse.status === 'complete' && (\n                  <p>{networkResponse.message}</p>\n                )}\n                {networkResponse.status === 'error' && (\n                  <p>\n                    Error occurred while transferring tokens:{' '}\n                    {networkResponse.message}\n                  </p>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AccountSend;\n","/workspace/Cryptway-ETH-Wallet/src/layout/nav.tsx",["91","92","93","94","95","96","97","98","99","100"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport { Account } from '../models/Account';\nimport Sidebar from './sidebar';\nimport logo from '../assets/logo.png';\nimport { Link } from 'react-router-dom';\nimport swap from '../assets/swap.png';\nimport currencies from '../assets/currencies.png';\nimport send from '../assets/send.png';\nimport recieve from '../assets/wallet.png';\nimport fund from '../assets/fund-ico.png';\nimport { generateAccount } from '../utils/AccountUtils';\n\nconst Navbar = () => {\n  const [showSidebar, setShowSidebar] = useState(false);\n\n  const recoveryPhraseKeyName = 'recoveryPhrase';\n  const [seedphrase, setSeedphrase] = useState('');\n  const [account, setAccount] = useState<Account | null>(null);\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSeedphrase(event.target.value);\n  }\n\n  const handleKeyDown = async (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  };\n\n  const recoverAccount = useCallback(async (recoveryPhrase: string) => {\n    const result = await generateAccount(recoveryPhrase);\n\n    setAccount(result.account);\n\n    if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n      localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n    }\n  }, []);\n\n  useEffect(() => {\n    const storedAccount = localStorage.getItem('account');\n\n    if (storedAccount) {\n      setAccount(JSON.parse(storedAccount));\n    }\n  }, []);\n\n  useEffect(() => {\n    const localStorageRecoveryPhrase = localStorage.getItem(\n      recoveryPhraseKeyName\n    );\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount]);\n\n  return (\n    <nav className=\"fixed  w-full justify-between\">\n      <header className=\"flex items-center px-0 sm:px-6 py-0 \">\n        <div className=\"flex items-center gap-2 flex-grow basis-0\">\n          <Link to=\"/\" className=\"gap-2 flex\">\n            {' '}\n            <img src={logo} alt=\"logo\" className=\"w-8 h-8 object-contain\" />\n            <text className=\"text-white text-2xl font-semibold\">\n              CRYPTWAY\n            </text>{' '}\n          </Link>{' '}\n        </div>\n        <div className=\"justify-end\">\n          <div className=\"flex gap-4\">\n            <div className=\"block\">\n              <button\n                type=\"button\"\n                className=\" flex   z-50   gap-2 px-4 py-[6px] hover:border-[1px] hover:px-[15px] hover:py-[5px] shadow-lg  flex-row justify-center items-center my-5 bg-[#2D2F36]  rounded-l-3xl rounded-r-3xl  cursor-pointer\"\n              >\n                <p className=\"font-poppins font-bold text text-white \">\n                  {account?.address.slice(0, 5) +\n                    '...' +\n                    account?.address.slice(-4)}\n                </p>{' '}\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"sm:ml-8 sm:mt-8 fixed  appbar\">\n        <div className=\"bg-[#2D2F36]   content-box sm:rounded-xl rounded-t-xl shadow-inner sm:p-3 p-1 grid grid-cols-5 sm:grid-cols-1    gap-4 border-[1.5px] border-[#41444F]\">\n          <div>\n            <button\n              type=\"button\"\n              onClick={() => setShowSidebar(!showSidebar)}\n              className=\" p-2 rounded  hover:shadow hover:bg-[#41444F]\"\n            >\n              <img src={recieve} className=\"w-10 h-10 object-contain\" />\n            </button>\n          </div>\n          <div>\n            <Link to=\"/send\">\n              <button\n                type=\"button\"\n                className=\" p-2 rounded  hover:shadow hover:bg-[#41444F]\"\n              >\n                <img src={send} className=\"w-10 h-10 object-contain\" />\n              </button>\n            </Link>\n          </div>\n          <div>\n            <Link to=\"/show-qr\">\n              <button\n                type=\"button\"\n                className=\" p-2 rounded  hover:shadow hover:bg-[#41444F]\"\n              >\n                {' '}\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  className=\"w-10 h-10 object-contain text-white bg-white\"\n                  viewBox=\"0 0 448 512\"\n                >\n                  <path d=\"M0 80C0 53.5 21.5 32 48 32h96c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80zM64 96v64h64V96H64zM0 336c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V336zm64 16v64h64V352H64zM304 32h96c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H304c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48zm80 64H320v64h64V96zM256 304c0-8.8 7.2-16 16-16h64c8.8 0 16 7.2 16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s7.2-16 16-16s16 7.2 16 16v96c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16s-7.2-16-16-16s-16 7.2-16 16v64c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V304zM368 480a16 16 0 1 1 0-32 16 16 0 1 1 0 32zm64 0a16 16 0 1 1 0-32 16 16 0 1 1 0 32z\" />\n                </svg>{' '}\n              </button>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/scan\">\n              <button\n                type=\"button\"\n                className=\" p-2 rounded  hover:shadow hover:bg-[#41444F]\"\n              >\n                <svg\n                  className=\"w-10 h-10 object-contain\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 122.61 122.88\"\n                >\n                  <path\n                    className=\"text-white\"\n                    d=\"M26.68,26.77H51.91V51.89H26.68V26.77ZM35.67,0H23.07A22.72,22.72,0,0,0,14.3,1.75a23.13,23.13,0,0,0-7.49,5l0,0a23.16,23.16,0,0,0-5,7.49A22.77,22.77,0,0,0,0,23.07V38.64H10.23V23.07a12.9,12.9,0,0,1,1-4.9A12.71,12.71,0,0,1,14,14l0,0a12.83,12.83,0,0,1,9.07-3.75h12.6V0ZM99.54,0H91.31V10.23h8.23a12.94,12.94,0,0,1,4.9,1A13.16,13.16,0,0,1,108.61,14l.35.36h0a13.07,13.07,0,0,1,2.45,3.82,12.67,12.67,0,0,1,1,4.89V38.64h10.23V23.07a22.95,22.95,0,0,0-6.42-15.93h0l-.37-.37a23.16,23.16,0,0,0-7.49-5A22.77,22.77,0,0,0,99.54,0Zm23.07,99.81V82.52H112.38V99.81a12.67,12.67,0,0,1-1,4.89,13.08,13.08,0,0,1-2.8,4.17,12.8,12.8,0,0,1-9.06,3.78H91.31v10.23h8.23a23,23,0,0,0,16.29-6.78,23.34,23.34,0,0,0,5-7.49,23,23,0,0,0,1.75-8.8ZM23.07,122.88h12.6V112.65H23.07A12.8,12.8,0,0,1,14,108.87l-.26-.24a12.83,12.83,0,0,1-2.61-4.08,12.7,12.7,0,0,1-.91-4.74V82.52H0V99.81a22.64,22.64,0,0,0,1.67,8.57,22.86,22.86,0,0,0,4.79,7.38l.31.35a23.2,23.2,0,0,0,7.5,5,22.84,22.84,0,0,0,8.8,1.75Zm66.52-33.1H96v6.33H89.59V89.78Zm-12.36,0h6.44v6H70.8V83.47H77V77.22h6.34V64.76H89.8v6.12h6.12v6.33H89.8v6.33H77.23v6.23ZM58.14,77.12h6.23V70.79h-6V64.46h6V58.13H58.24v6.33H51.8V58.13h6.33V39.33h6.43V58.12h6.23v6.33h6.13V58.12h6.43v6.33H77.23v6.33H70.8V83.24H64.57V95.81H58.14V77.12Zm31.35-19h6.43v6.33H89.49V58.12Zm-50.24,0h6.43v6.33H39.25V58.12Zm-12.57,0h6.43v6.33H26.68V58.12ZM58.14,26.77h6.43V33.1H58.14V26.77ZM26.58,70.88H51.8V96H26.58V70.88ZM32.71,77h13V89.91h-13V77Zm38-50.22H95.92V51.89H70.7V26.77Zm6.13,6.1h13V45.79h-13V32.87Zm-44,0h13V45.79h-13V32.87Z\"\n                  />\n                </svg>\n              </button>\n            </Link>\n          </div>\n\n          <div>\n            <Link to=\"/history\">\n              <button\n                type=\"button\"\n                className=\" p-2 rounded  hover:shadow hover:bg-[#41444F]\"\n              >\n                <img src={fund} className=\"w-10 h-10 object-contain\" />\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <a href=\"#\">\n        {' '}\n        <button\n          type=\"button\"\n          className=\" fixed gap-2 bg-orange-500  bottom-2 right-5 flex px-6 py-[6px] border-[1px] border-[#41444F] hover:px-[23px] hover:py-[5px] shadow-lg  flex-row justify-center items-center my-5  rounded-l-3xl rounded-r-3xl  cursor-pointer\"\n        >\n          {' '}\n          <p className=\"font-poppins font-bold text text-white text-sm \">\n            {' '}\n            Request Feature{' '}\n          </p>{' '}\n        </button>{' '}\n      </a>\n\n      <div\n        className={`fixed side-z shadow-lg  bottom-20 right-0 bg-[#2D2F36]  rounded-l-xl p-3 grid sm:grid-cols-1   gap-4    ease-in-out duration-300 ${\n          showSidebar ? 'translate-x-2 ' : 'translate-x-full'\n        }`}\n      >\n        {' '}\n        <Sidebar />{' '}\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","/workspace/Cryptway-ETH-Wallet/src/pages/AccountTransactions.tsx",["101"],[],"import { ethers } from 'ethers';\nimport React, { useCallback, useEffect, useState ,useRef } from 'react';\nimport { Account } from '../models/Account';\nimport { sepolia } from '../models/Chain';\nimport { Transaction } from '../models/Transaction';\nimport { TransactionService } from '../services/TransactionService';\nimport { shortenAddress } from '../utils/AccountUtils'; \n\ntype AccountTransactionsProps = {\n  account: Account,\n};\n\n\nconst AccountTransactions: React.FC<AccountTransactionsProps> = ({ account }) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]); \n\n  const [networkResponse, setNetworkResponse] = useState<{ status: null | 'pending' | 'complete' | 'error', message: string | React.ReactElement }>({\n    status: null,\n    message: '',\n  });\n\n\n  const getTransactions = useCallback(\n    (limit: number) => {\n      setNetworkResponse({\n        status: 'pending',\n        message: '',\n      });\n      TransactionService.getTransactions(account.address, limit).then(response => {\n        setTransactions(response.data.result);\n      }).catch(error => {\n        console.log({error})\n        setNetworkResponse({\n          status: 'error',\n          message: JSON.stringify(error),\n        });\n      }).finally(()=>{\n        setNetworkResponse({\n          status: 'complete',\n          message: '',\n        });\n      });\n    },[account.address]\n  );\n\n  \nuseEffect(() => {\n  getTransactions(10);\n}, [getTransactions]);\n \n\n  return (\n    <div className=\"flex-1 flex justify-start   items-center flex-col   p-5 z-40 \">\n     \n    <div className=\"bg-[#2D2F36] mt-20   w-max-full     sm:w-[30rem]   md:w-[32rem] rounded-3xl p-4 content-box\">\n           \n    <div className=\"AccountTransactions\">\n     \n\n  <h2 className=\"text-2xl font-bold mb-4\">Transactions</h2>\n  <div className=\"TransactionsMetaData text-sm mb-4\">\n    {networkResponse.status === \"complete\" && transactions.length === 0 && (\n      <p>No transactions found for this address</p>\n    )}\n    {networkResponse.status && (\n      <>\n        {networkResponse.status === \"pending\" && (\n          <p className=\"text-purple-600\">Loading transactions...</p>\n        )}\n        {networkResponse.status === \"error\" && (\n          <p className=\"text-red-600\">\n            Error occurred while transferring tokens: {networkResponse.message}\n          </p>\n        )}\n      </>\n    )}\n  </div>\n  <div className=\"overflow-x-auto\">\n    <table className=\"w-full table-auto\">\n      <thead>\n        <tr className=\"bg-gray-200 text-gray-700 uppercase text-xs font-bold\">\n          <th className=\"px-4 py-2\">Hash</th>\n          <th className=\"px-4 py-2\">From</th>\n          <th className=\"px-4 py-2\">To</th>\n          <th className=\"px-4 py-2\">Value</th>\n          <th className=\"px-4 py-2\">Timestamp</th>\n        </tr>\n      </thead>\n      <tbody className=\"text-sm font-medium\">\n        {transactions.map(transaction => (\n          <tr key={transaction.hash} className=\"border-b border-gray-200\">\n            <td className=\"px-4 py-2\">\n              <a\n                href={`${sepolia.blockExplorerUrl}/tx/${transaction.hash}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-purple-600 hover:underline\"\n              >\n                {shortenAddress(transaction.hash)}\n              </a>\n            </td>\n            <td className=\"px-4 py-2\">\n              <a\n                href={`${sepolia.blockExplorerUrl}/address/${transaction.from_address}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-purple-600 hover:underline\"\n              >\n                {shortenAddress(transaction.from_address)}\n              </a>\n              {transaction.from_address.toLowerCase() === account.address.toLowerCase() ? \n                <span className=\"ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-500 text-white\">OUT</span>\n                :\n                <span className=\"ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-500 text-white\">IN</span>\n              }\n            </td>\n            <td className=\"px-4 py-2\">\n              <a\n                href={`${sepolia.blockExplorerUrl}/address/${transaction.to_address}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-purple-600 hover:underline\"\n              >\n                {shortenAddress(transaction.to_address)}\n              </a>\n            </td>\n            <td className=\"px-4 py-2\">\n              {ethers.utils.formatEther(transaction.value)} ETH\n            </td>\n            <td className=\"px-4 py-2\">\n              {new Date(transaction.block_timestamp).toLocaleString()}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n</div>\n\n           \n          </div>\n      </div>\n  );\n};\n\nexport default AccountTransactions;","/workspace/Cryptway-ETH-Wallet/src/layout/sidebar.tsx",["102","103","104","105","106","107","108","109","110"],[],"import { QRCodeCanvas } from \"qrcode.react\";    \nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Account } from '../models/Account';  \nimport logo from '../assets/logo.png'; \nimport { Link } from \"react-router-dom\";\nimport swap from   \"../assets/swap.png\"; \nimport currencies from \"../assets/currencies.png\"; \nimport send from \"../assets/send.png\"; \nimport recieve from \"../assets/wallet.png\";   \nimport fund from \"../assets/fund-ico.png\"; \nimport { generateAccount } from '../utils/AccountUtils';\n\nconst Sidebar = () => { \n  const recoveryPhraseKeyName = 'recoveryPhrase';\n  const [seedphrase, setSeedphrase] = useState('');\n const [account, setAccount] = useState<Account | null>(null);\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSeedphrase(event.target.value);\n  }\n\n  const handleKeyDown = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  }\n\n const recoverAccount = useCallback(\n   async (recoveryPhrase: string) => {\n     const result = await generateAccount(recoveryPhrase);\n   \n   setAccount(result.account);\n\n    if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n      localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n    }\n\n  }, []\n);\n\n\n useEffect(() => {\n const storedAccount = localStorage.getItem('account');\n\n if (storedAccount) {\n   setAccount(JSON.parse(storedAccount));\n }\n}, []);\n\nuseEffect(() => {\n\n const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName)\n if (localStorageRecoveryPhrase) {\n   setSeedphrase(localStorageRecoveryPhrase);\n   recoverAccount(localStorageRecoveryPhrase);\n }\n}, [recoverAccount])\n  return (\n    \n        <>\n         <div className=\"p-3 flex justify-end  shadow-2xl items-start flex-col rounded-xl h-40 w-72  bg-gradient-to-tr from-gray-900 to-gray-700  my-5 bg-black white-glassmorphism \">\n            <div className=\"flex justify-between flex-col w-full h-full\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"w-50 h-50   flex justify-center items-center\">\n                 \n   <div className=\"p-[2px]  rounded-[2px] white-glassmorphism\">\n   {account?.address && <QRCodeCanvas\nid=\"qrCode\" \nsize={80}\nvalue={account?.address}\nbgColor={\"#F4C430\"}\nlevel={\"H\"} \nclassName=\" \"\n/> } \n   </div> </div> \n               <p className=\"text-white font-poppins font-bold text-lg mt-1\">\n                  CRYPTWAY\n                </p>\n                <img src={logo}  className=\"w-8 h-8\" alt=\"\" />\n              </div>\n              <div>\n                <p className=\"font-poppins font-normal text-white text-[10px] text-center \"> {account?.address}</p> \n              </div>\n            </div>\n          </div>\n        \n        \n <Link to=\"/history\"> \n<button\n                type=\"button\"\n                  \n                  className=\"  px-4 py-[6px] hover:border-[1px] hover:px-[15px] hover:py-[5px] shadow-lg  text-white    w-full text-center  rounded-l-3xl rounded-r-3xl  cursor-pointer bg-purple-600  \"\n                >\n                   <p className=\"font-poppins  font-bold text text-white text-sm \">\n                  Transaction History\n                  </p> \n                </button> </Link>\n\n        </>\n       \n \n  );\n};\n\nexport default Sidebar;","/workspace/Cryptway-ETH-Wallet/src/pages/AccountDetail.tsx",["111","112","113","114","115","116"],[],"/workspace/Cryptway-ETH-Wallet/src/utils/TransactionUtils.ts",[],[],"/workspace/Cryptway-ETH-Wallet/src/models/Chain.ts",[],[],"/workspace/Cryptway-ETH-Wallet/src/services/TransactionService.ts",[],[],{"ruleId":"117","severity":1,"message":"118","line":17,"column":10,"nodeType":"119","messageId":"120","endLine":17,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":17,"column":28,"nodeType":"119","messageId":"120","endLine":17,"endColumn":47},{"ruleId":"117","severity":1,"message":"122","line":19,"column":12,"nodeType":"119","messageId":"120","endLine":19,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":23,"column":9,"nodeType":"119","messageId":"120","endLine":23,"endColumn":22},{"ruleId":"124","severity":1,"message":"125","line":69,"column":5,"nodeType":"126","endLine":69,"endColumn":51},{"ruleId":"117","severity":1,"message":"118","line":12,"column":11,"nodeType":"119","messageId":"120","endLine":12,"endColumn":27},{"ruleId":"117","severity":1,"message":"121","line":12,"column":29,"nodeType":"119","messageId":"120","endLine":12,"endColumn":48},{"ruleId":"117","severity":1,"message":"122","line":14,"column":13,"nodeType":"119","messageId":"120","endLine":14,"endColumn":25},{"ruleId":"117","severity":1,"message":"123","line":18,"column":10,"nodeType":"119","messageId":"120","endLine":18,"endColumn":23},{"ruleId":"117","severity":1,"message":"127","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":27},{"ruleId":"117","severity":1,"message":"128","line":19,"column":10,"nodeType":"119","messageId":"120","endLine":19,"endColumn":17},{"ruleId":"117","severity":1,"message":"129","line":6,"column":8,"nodeType":"119","messageId":"120","endLine":6,"endColumn":12},{"ruleId":"117","severity":1,"message":"130","line":7,"column":8,"nodeType":"119","messageId":"120","endLine":7,"endColumn":18},{"ruleId":"117","severity":1,"message":"118","line":19,"column":10,"nodeType":"119","messageId":"120","endLine":19,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":19,"column":28,"nodeType":"119","messageId":"120","endLine":19,"endColumn":47},{"ruleId":"117","severity":1,"message":"122","line":21,"column":12,"nodeType":"119","messageId":"120","endLine":21,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":25,"column":9,"nodeType":"119","messageId":"120","endLine":25,"endColumn":22},{"ruleId":"124","severity":1,"message":"125","line":100,"column":15,"nodeType":"126","endLine":100,"endColumn":73},{"ruleId":"124","severity":1,"message":"125","line":109,"column":17,"nodeType":"126","endLine":109,"endColumn":72},{"ruleId":"124","severity":1,"message":"125","line":157,"column":17,"nodeType":"126","endLine":157,"endColumn":72},{"ruleId":"131","severity":1,"message":"132","line":164,"column":7,"nodeType":"126","endLine":164,"endColumn":19},{"ruleId":"117","severity":1,"message":"133","line":2,"column":51,"nodeType":"119","messageId":"120","endLine":2,"endColumn":57},{"ruleId":"117","severity":1,"message":"129","line":6,"column":8,"nodeType":"119","messageId":"120","endLine":6,"endColumn":12},{"ruleId":"117","severity":1,"message":"130","line":7,"column":8,"nodeType":"119","messageId":"120","endLine":7,"endColumn":18},{"ruleId":"117","severity":1,"message":"134","line":8,"column":8,"nodeType":"119","messageId":"120","endLine":8,"endColumn":12},{"ruleId":"117","severity":1,"message":"135","line":9,"column":8,"nodeType":"119","messageId":"120","endLine":9,"endColumn":15},{"ruleId":"117","severity":1,"message":"136","line":10,"column":8,"nodeType":"119","messageId":"120","endLine":10,"endColumn":12},{"ruleId":"117","severity":1,"message":"118","line":17,"column":10,"nodeType":"119","messageId":"120","endLine":17,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":17,"column":28,"nodeType":"119","messageId":"120","endLine":17,"endColumn":47},{"ruleId":"117","severity":1,"message":"122","line":19,"column":12,"nodeType":"119","messageId":"120","endLine":19,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":23,"column":9,"nodeType":"119","messageId":"120","endLine":23,"endColumn":22},{"ruleId":"117","severity":1,"message":"127","line":5,"column":8,"nodeType":"119","messageId":"120","endLine":5,"endColumn":27},{"ruleId":"117","severity":1,"message":"137","line":20,"column":24,"nodeType":"119","messageId":"120","endLine":20,"endColumn":39},{"ruleId":"117","severity":1,"message":"138","line":22,"column":10,"nodeType":"119","messageId":"120","endLine":22,"endColumn":25},{"ruleId":"117","severity":1,"message":"139","line":38,"column":12,"nodeType":"119","messageId":"120","endLine":38,"endColumn":42},{"ruleId":"117","severity":1,"message":"140","line":51,"column":12,"nodeType":"119","messageId":"120","endLine":51,"endColumn":30},{"ruleId":"117","severity":1,"message":"141","line":55,"column":18,"nodeType":"119","messageId":"120","endLine":55,"endColumn":26},"@typescript-eslint/no-unused-vars","'showRecoverInput' is assigned a value but never used.","Identifier","unusedVar","'setShowRecoverInput' is assigned a value but never used.","'handleChange' is defined but never used.","'handleKeyDown' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AccountTransactions' is defined but never used.","'balance' is assigned a value but never used.","'swap' is defined but never used.","'currencies' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useRef' is defined but never used.","'send' is defined but never used.","'recieve' is defined but never used.","'fund' is defined but never used.","'setExchangeRate' is assigned a value but never used.","'networkResponse' is assigned a value but never used.","'handleDestinationAddressChange' is defined but never used.","'handleAmountChange' is defined but never used.","'transfer' is defined but never used."]